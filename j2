
pipeline {
  agent {
    label "Java"
  }
  
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
    }
    
    stage('jacoco') {
      steps {
        jacoco()
      }
    }
    
    stage('SonarQube analysis') {
      steps {
        script {
          def scannerHome = tool 'scanner_sonar'
          withSonarQubeEnv('jenkins-sonar') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=javawebapp \
              -Dsonar.projectName=javawebapp \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.java.binaries='target/classes'
            """
          }
        }
      }
    }
    
    stage("Sonar Quality Gate Check") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            def qualityGate = waitForQualityGate()
            if (qualityGate.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
            }
          }
        }
      }
    }
    
    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader(
          artifacts: [[
            artifactId: 'SimpleWebApplication', 
            classifier: '', 
            file: 'target/SimpleWebApplication.war', 
            type: 'war'
          ]], 
          credentialsId: 'nexus-ssh', 
          groupId: 'com.maven', 
          nexusUrl: '13.201.120.172:8081/', 
          nexusVersion: 'nexus3', 
          protocol: 'http', 
          repository: 'maven-snapshots', 
          version: '1.0.0-SNAPSHOT'
        )
      }
    }
  
    stage('Deploy to Tomcat') {
    agent {
        label "Tomcat"
    }
    steps {
        sh 'sudo systemctl stop tomcat'

        // Define the Nexus repository URL
        def NEXUS_URL = "http://13.201.120.172:8081/repository/maven-snapshots/com/maven/SimpleWebApplication/1.0.0-SNAPSHOT/"

        // Fetch the HTML content of the directory and extract the latest WAR file
        def LATEST_BUILD = sh(script: """
            curl -s "${NEXUS_URL}" | grep -oP 'href="\\K[^"]*SimpleWebApplication-1.0.0-.*?\\.war' | sort -V | tail -1
        """, returnStdout: true).trim()

        // Check if LATEST_BUILD is not empty before proceeding
        if (LATEST_BUILD) {
            echo "LATEST_BUILD is: ${LATEST_BUILD}"
            sh """
                wget --user=admin --password=admin "${NEXUS_URL}${LATEST_BUILD}" -O /home/tomcat/apache-tomcat-10.1.30/webapps/SimpleWebApplication-1.0.0-*.war
            """
        } else {
            error("No build found to download.")
        }

        sh 'sudo systemctl start tomcat'
    }
}


  }
}
